[
    {   
        "title": "Blogging with Jekyll",
        "date": "2015-06-10",
        "body": "Jekyll is a blogging framework supported by Github pages.  It uses a combination of raw text and template files to generate web content that can be hosted on the 'gh-pages' branch of a project or 'master' for a User or Organization site hosted on Github.  I'll be generating posts with markdown &amp; Jekyll from time to time."
    },
    {
        "title": "Custom Java Annotations",
        "date": "2015-08-15",
        "body" : "Cross one off my list... I had been telling myself I would make time to write a custom annotation processor for some time now and now was today.  In the simplest scenario, I create a field-level annotation defining the creation of an object without an explicit call to a factory method which would otherwise be used.  It elimates a small amount of up-front code and provides a direct-inject resource at construction. <ul class='blog-links'><li><span class='git'></span><a href='https://github.com/Floresj4/JavaAnnotations' target='_blank'>@Floresj4/JavaAnnotations</a></li></ul>"
    },
    {
        "title" : "3M Headlight Restoration",
        "date" : "2015-09-07",
        "body" : "<div class='stg-col-1 suzie-light'> <p> I recently came across an opportunity to restore the headlights on my Subaru, gratis, via a product&#8209;review &amp; survey at work.  It's been 6 years and the lenses have accumulated a slight haze. </p><p> Nothing too bad, but why let it worsen...  The first two images show the amount of buildup and the start of the project.  I'll briefly describe the project and include some images. </p><p> The 3M Headlight Restoration Kit consisted of a drill-attachment sanding/buffing pad, masking tape, sand paper (P500 &amp; P800), a 3M Trizact refining disc (P3000), and a protective coating wipe. </p><p> It starts with the P500 disc...  I'll admit, I was worried as soon as the disc touched the lense.  It scratched away enough material to make me doubt the outcome.  Regardless, I continue sanding and wiping until I had a smooth even lense again. </p><p> Another session of sanding and wiping with the P800 follows. </p><p> Next, buffing with the Trizact disc.  This was a clay-like disc which requires the lense surface remain saturated during the buff; science&ndash;magic.  After buffing evenly the headlights are beginning to come back to life, still a bit foggy... </p><p> Lastly, the 3M coating is applied.  Between the Trizact pad and the protective coating, this is where all the magic is.  Any haze which remains is wiped away effortlessly.  It's quite impressive! </p><p class='console'> [Headlight images removed] </p> <p> Added to the backlog... I'll plan to use Flickr or whatever I consider a suitable alternative. </p> </div>"
    },
    {
        "title": "Responsive",
        "date": "2015-09-11",
        "body": "The Responsive branch of this project re-styles the original template to be mobile friendly. The new CSS stylings supporting landscape and portrait orientations on 360 and 640 pixel widths and a device pixel ratio of 3.  Chrome Developer tools' device mode was set to a Samsung Galaxy S4. I opted to create my own CSS stylings instead of using a commercial-public framework, like Bootstrap, to practice Responsive Web Development (RWD) and CSS Media Queries."
    },
    {
        "title": "Disable Eclipse XML validation",
        "date": "2015-09-29",
        "body": "I may need this in the future...  This is done at a project level instead of the entire workspace. <ul><li>Right-click project -> Properties.</li><li>Validation -> Enable project specific settings.</li><li>Select the ellipsis to add a file to the exclusion group.</li><li>Select the Exclude Group topic and select Add Rule.</li><li>Select the Folder or file name as the filter type and browse for file.</li></ul>"
    },
    {
        "title": "AngularJS",
        "date": "2015-10-28",
        "body": "I started exploring the <a href='https://angularjs.org' target='_blank'>@angularjs</a> framework and decided to create a small project.   <a href='http://floresj4.github.io/AngularJS/'>Angular REST Client</a> combines AngularJS for client-side events, mainly routing and AJAX requests through <span class='console'>$http</span>, and the Java API for RESTful Web Services (JAX-RS) for server-side responsibilities - resource (content & hypermedia) management. Angular REST Client also samples <a href='https://twitter.com/bower' target='_blank'>@bower</a> for package management, <a href='https://twitter.com/getbootstrap' target='_blank'>@getbootstrap</a> for responsive web containers, and <a href='https://twitter.com/jquery' target='_blank'>@jquery</a> for document object model interaction."
    },
    {
        "title": "Angular drag-n-drop",
        "date": "2018-07-21",
        "categories": "angular javascript",
        "body": "Exploring drag-n-drop functionality using Angular components and event binding.  The structural  directive <code>*ngFor</code> is used to create list-item elements and bind the events necessary to  support drag-n-drop functionality - <code>(dragstart)</code>, <code>(dragover)</code>, and <code>(drop)</code>.  The draggable attribute is also set on each element to ensure they can be dragged. [angular-drag-n-drop](https://floresj4.github.io/angular-drag-n-drop/)"
    }
]